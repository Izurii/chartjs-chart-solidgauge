{
	"compilerOptions": {
		"target": "es2016", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
		// "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
		"module": "commonjs", /* Specify what module code is generated. */
		// "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
		"baseUrl": "./src", /* Specify the base directory to resolve non-relative module names. */
		// "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
		// "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
		// "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
		// "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
		"outDir": "./dist/", /* Specify an output folder for all emitted files. */
		"removeComments": true, /* Disable emitting comments. */
		"esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
		"forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
		"strict": true, /* Enable all strict type-checking options. */
		"noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied `any` type.. */
		"strictNullChecks": true, /* When type checking, take into account `null` and `undefined`. */
		"strictFunctionTypes": true, /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
		"noImplicitThis": true, /* Enable error reporting when `this` is given the type `any`. */
		"alwaysStrict": true, /* Ensure 'use strict' is always emitted. */
		"noUnusedLocals": true, /* Enable error reporting when a local variables aren't read. */
		"noUnusedParameters": true, /* Raise an error when a function parameter isn't read */
		"noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
		"skipLibCheck": true /* Skip type checking all .d.ts files. */
	}
}